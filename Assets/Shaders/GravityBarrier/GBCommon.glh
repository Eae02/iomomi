#ifndef GB_COMMON_H
#define GB_COMMON_H

#include "../Inc/Utils.glh"

const vec3 COLOR = vec3(0.1, 0.7, 0.9);
const vec3 COLOR_RED = vec3(1.0, 0.2, 0.3) * 2;

const float OFFSET_SCALE = 0.25;
const float OFFSET_SCALE_RED = 0.4;
const float LINE_SPACING = 0.5;
const float LINE_WIDTH = 0.003;
const float EDGE_FADE_DIST = 0.2;
const float TIME_AXIS_SCALE = 0.25;

layout(set=2, binding=0) uniform ParametersUB
{
	vec3 position;
	float opacity;
	vec4 tangent;
	vec4 bitangent;
	uint blockedAxis;
	float noiseSampleOffset;
	float lineWidth;
	float glowDecay;
	float glowIntensity;
} pc;

float calcEdgeDist(vec2 scaledTC)
{
	float halfSize = pc.bitangent.w * 0.5;
	return min((halfSize - abs(scaledTC.y - halfSize)) * TIME_AXIS_SCALE / EDGE_FADE_DIST, 1.0);
}

#ifdef GB_WITH_BARRIER_SETTINGS_UB
const int NUM_INTERACTABLES = 8;
layout(binding=2, std140) uniform BarrierSettingsUB
{
	uvec4 iaDownAxis[NUM_INTERACTABLES / 4];
	vec4 iaPosition[NUM_INTERACTABLES];
	float barrierAnimTime;
};
float getInteractablesNegScale(vec3 worldPos, inout vec2 scaledTC, float edgeDist, float waterDist)
{
	float negScale = 1.0 - smoothstep(0.5, 0.8, waterDist);
	float stretch = 0;
	for (int i = 0; i < NUM_INTERACTABLES; i++)
	{
		vec3 toObject = worldPos - iaPosition[i].xyz;
		float d = length(toObject);
		uint da = iaDownAxis[i / 4][i % 4];
		
		if (da == pc.blockedAxis)
		{
			negScale += 1.0 - smoothstep(1.0, 1.5, d);
		}
		else if (da != 3)
		{
			float ns = exp(-d * d) * dot(toObject, pc.tangent.xyz) * pc.tangent.w;
			stretch = abs(ns) > abs(stretch) ? ns : stretch;
		}
	}
	
	scaledTC.x -= 0.3 * stretch * edgeDist;
	return clamp(negScale, 0.0, 1.0);
}
#else
const float barrierAnimTime = 0;
#endif

layout(binding=1) uniform sampler2D noiseTex;

vec4 calculateColor(vec2 scaledTC, float edgeDist, float negScale, float baseIntensity)
{
	float intensity = baseIntensity;
	
	float centerLn = floor(scaledTC.x / LINE_SPACING);
	float offScale = edgeDist * mix(OFFSET_SCALE, OFFSET_SCALE_RED, negScale);
	
	vec2 noiseSamplePos = vec2(centerLn * 1.3 + pc.noiseSampleOffset, TIME_AXIS_SCALE + barrierAnimTime) + scaledTC.y * vec2(0.08, 0.05);
	vec4 noiseSample = textureLod(noiseTex, noiseSamplePos, 0);
	
	vec4 linePos4 = centerLn + 0.5 + (noiseSample - vec4(0.5)) * offScale;
	vec4 dist = abs(vec4(scaledTC.x) - linePos4 * LINE_SPACING);
	vec4 intensity4 =
		pc.glowIntensity * exp(dist * pc.glowDecay) +
		clamp(1 + 100 * (vec4(pc.lineWidth) - dist), vec4(0.0), vec4(1.0));
	
	intensity += dot(intensity4, vec4(1.0)) * pc.opacity;
	
	return vec4(mix(COLOR, COLOR_RED, negScale) * intensity, min(intensity, 1.0));
}

#endif
