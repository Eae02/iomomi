#ifndef DEFERRED_LIGHT_GLH
#define DEFERRED_LIGHT_GLH

#define RENDER_SETTINGS_BINDING 0
#include "GBData.glh"
#include "RenderSettings.glh"
#include <Deferred.glh>

layout(binding=1) uniform sampler2D gbColor1Sampler;
layout(binding=2) uniform sampler2D gbColor2Sampler;
layout(binding=3) uniform sampler2D gbDepthSampler;
layout(binding=4) uniform usampler2D gbFlagsSampler;

layout(location=0) out vec4 color_out;

vec2 texSize;

vec3 CalculateLighting(GBData data);

const uint RF_NO_LIGHTING = 0x1;
const uint RF_NO_SSR = 0x2;

void main()
{
	ivec2 screenCoord = ivec2(gl_FragCoord.xy);
	uint flags = texelFetch(gbFlagsSampler, ivec2(gl_FragCoord.xy), 0).r;
	
	texSize = vec2(textureSize(gbColor1Sampler, 0).xy);
	vec2 screenCoord01 = vec2(screenCoord) / texSize;
	
	vec4 c1 = texelFetch(gbColor1Sampler, screenCoord, 0);
	vec4 c2 = texelFetch(gbColor2Sampler, screenCoord, 0);
	
	GBData data;
	data.flags = flags;
	data.hDepth = texelFetch(gbDepthSampler, screenCoord, 0).r;
	data.worldPos = WorldPosFromDepth(data.hDepth, screenCoord01, renderSettings.invViewProjection);
	data.normal = SMDecode(c2.xy);
	data.albedo = c1.xyz;
	data.roughness = c2.z;
	data.metallic = c2.w;
	data.ao = c1.w;
	
	color_out = vec4(CalculateLighting(data), 0);
}

#endif
