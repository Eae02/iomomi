#ifndef DEFERRED_LIGHT_GLH
#define DEFERRED_LIGHT_GLH

#include "RenderSettings.glh"
#include <Deferred.glh>

layout(binding=0, std140) uniform RenderSettingsUB
{
	RenderSettings renderSettings;
};

layout(binding=1) sampler2D gbColor1Sampler;
layout(binding=2) sampler2D gbColor2Sampler;
layout(binding=3) sampler2D gbDepthSampler;

struct GBData
{
	float hDepth;
	vec3 worldPos;
	vec3 normal;
	vec3 albedo;
	float roughness;
	float metallic;
	float ao;
};

GBData ReadGB(vec2 texCoord)
{
	vec4 c1 = texture(gbColor1Sampler, texCoord);
	vec4 c2 = texture(gbColor2Sampler, texCoord);
	
	GBData data;
	data.hDepth = texture(gbDepthSampler, texCoord).r;
	data.worldPos = WorldPosFromDepth(data.hDepth, texCoord, renderSettings.invViewProjection);
	data.normal = SMDecode(c2.xy);
	data.albedo = c1.xyz;
	data.roughness = c2.z;
	data.metallic = c2.w;
	data.ao = c1.w;
	
	return data;
}

#endif
